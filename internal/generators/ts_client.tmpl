{{ define "model" -}}
type {{ toCamel .Name }} = {
{{- range .Fields }}
    {{ toLowerCamel .Name }}: {{ resolveType .Type }};
{{- end }}
}

{{ end }}

{{ define "method" }}
{{- if hasParameters . }}
function {{ toLowerCamel .Name }}(fetcher: Fetcher<{{ toCamel .ParameterType.Name }}, {{ returnType . }}>, {{ joinParameters .}}): Promise<{{ returnType . }}> {
    const params: {{ toCamel .ParameterType.Name }} = {
    {{- range .Parameters }}
        {{ toLowerCamel .Name }},
    {{- end }}
    };
    return fetcher("/{{ toSnake .Name }}", params);
}
{{- else }}
function {{ toLowerCamel .Name }}(fetcher: Fetcher<undefined, {{ returnType . }}>, {{ joinParameters .}}): Promise<{{ returnType . }}> {
    return fetcher("/{{ toSnake .Name }}", undefined);
}
{{- end }}
{{ end }}