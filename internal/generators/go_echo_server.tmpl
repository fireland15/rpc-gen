{{ define "model" -}}
type {{ toCamel .Name }} struct {
{{- range .Fields }}
    {{ toCamel .Name }} {{ resolveType .Type }} `json:"{{ toLowerCamel .Name }}"`
{{- end }}
}

{{ end }}

package {{ .Package }}

{{ define "imports" -}}
import (
    "net/http"
    "github.com/labstack/echo/v4"
    {{- range .}}
    "{{.}}"
    {{- end}}
)

{{ end }}

{{ define "service_interface" -}}
type Service interface {
{{- range .Methods }}
    {{ toSignature . }} 
{{- end }}
}

{{ end }}

{{ define "handler_func" }}
func (h *Handler) {{ .Name }}(c echo.Context) error {
{{- if hasParameters . -}}
{{- if hasReturnValue . }}
    params := {{ toCamel .ParameterType.Name }}{}
    err := c.Bind(&params)
    if err != nil {
        return err
    }

    result, err := h.service.{{ toCamel .Name }}({{ joinParameters . }})
    if err != nil {
        return err
    }

    return c.JSON(http.StatusOK, result)
{{- else }}
    params := {{ toCamel .ParameterType.Name }}{}
    err := c.Bind(&params)
    if err != nil {
        return err
    }

    err = h.service.{{ toCamel .Name }}({{ joinParameters . }})
    if err != nil {
        return err
    }
    return c.NoContent(http.StatusOK)
{{- end -}}
{{ else }}
{{- if hasReturnValue . }}
    result, err := h.service.{{ toCamel .Name }}()
    if err != nil {
        return err
    }
    return c.JSON(http.StatusOK, result)
{{- else }}
    err := h.service.{{ toCamel .Name }}()
    if err != nil {
        return err
    }
    return c.NoContent(http.StatusOK)
{{- end -}}
{{- end }}
}
{{ end }}

{{ define "handler" }}
type Handler struct {
    service Service
}
{{ end }} 

{{ define "register_handler" }} 

func (h *Handler) RegisterHandlers(e *echo.Echo, middleware echo.MiddlewareFunc) {
    {{- range .Methods }}
    e.POST("/{{ toSnake .Name }}", h.{{ toCamel .Name }}, middleware)
    {{- end }}
}

{{ end }}